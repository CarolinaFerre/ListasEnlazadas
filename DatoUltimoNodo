/*1.  Codificar un método en Java que trabaja con listas de enteros

static int comprobarDatoUltimoNodo ( Lista milista)

Este método  recibe como argumento una lista  y devuelve como resultado los siguientes posibles valores:
•	- 0, si el valor del último nodo coincide con el número de nodos de la lista.
•	-1, si el valor del último nodo es menor que el número de nodos de la lista.
•	+1, si el valor del último nodo es mayor que el número de nodos de la lista.

OBSERVACIONES:
Si la lista  está vacía el método devolverá el valor 0.

EJEMPLOS:
Dadas las siguientes tres listas:

lista1 → 1 → 2 → 4 → 7 → 5
lista2 → 1 → 3 → 1
lista3 → 7 → 5 → 3 → 10

•	El valor del último nodo de lista1 (5) coincide con número de nodos de la lista. El método devuelve 0. ( 5 = 5)
•	El valor del último nodo de lista2 (1) es menor que el número de nodos de la lista. El método devuelve -1.  ( 3 > 1 )
•	El valor del último nodo de lista3 (5) es mayor que el número de nodos de la lista. El método devuelve +1.  ( 4 < 10)
*/

//CLASE NODO
package listas;

public class Nodo {
	Nodo inicio;
	int valor;
	Nodo siguiente;
	String resu="";
	public Nodo(int valor) {
		this.valor=valor;
		this.siguiente=null;
	}
	public int obtenerValor() {
		return valor;
	}
	public void enlazarSiguiente(Nodo nuevo) {
		siguiente=nuevo;
	}
	public Nodo siguiente() {
		return siguiente;
	}

}


//CLASE LISTAS2

package listas;

import java.util.Scanner;

import ejercicios_listas.Nodo;

public class listas2 {
	static Scanner sc=new Scanner(System.in);
		Nodo inicio;
		Nodo nuevo;
		int tamaño;
	public listas2() {
		this.inicio=null;
		this.tamaño=0;
	}
	public void añadeValor(int valor) {
		if(this.inicio==null) {
			inicio=new Nodo(valor);
		}else {
			Nodo temporal=inicio;
			nuevo=new Nodo(valor);
			nuevo.enlazarSiguiente(temporal);
			inicio=nuevo;
		}
		tamaño++;
	}
	public void devuelveNumero() {
		Nodo temporal = inicio;
		int contador = 0;
		if (this.inicio==null) {
			System.out.println(0);
		contador=1;
	}else{
			while(temporal.obtenerSiguiente()!=null) {
				temporal=temporal.obtenerSiguiente();
				contador++;
			}
			int valor=temporal.ObtenerValor();
			if(contador>valor) {
				System.out.println(-1);
			}else if(contador<valor) {
				System.out.println(+1);
			}else if(contador==valor) {
				System.out.println(0);
			}
		}
		
	}
	public void recorrerLista() {
		Nodo temporal = inicio;
		Object valor;
		int contador=0;
		while(temporal!=null) {
			valor=temporal.ObtenerValor();
			temporal=temporal.obtenerSiguiente();
			contador++;
			
			System.out.print(valor);
		}
		System.out.println();
		System.out.println("El número de elementos es= "+contador);
	}

	public static void main(String[] args) {
		listas2 lista=new listas2();
		lista.añadeValor(5);
		lista.añadeValor(7);
		lista.añadeValor(4);
		lista.añadeValor(2);
		lista.añadeValor(1);
		
		System.out.println("El resultado de la lista es...");
		lista.recorrerLista();
		System.out.println("El número que devuelve es...");
		lista.devuelveNumero();
		
		listas2 lista2=new listas2();
		lista2.añadeValor(1);
		lista2.añadeValor(3);
		lista2.añadeValor(1);
		
		System.out.println("El resultado de la lista es...");
		lista2.recorrerLista();
		System.out.println("El número que devuelve es...");
		lista2.devuelveNumero();
		
		listas2 lista3=new listas2();
		lista3.añadeValor(10);
		lista3.añadeValor(3);
		lista3.añadeValor(5);
		lista3.añadeValor(7);
		
		System.out.println("El resultado de la lista es...");
		lista3.recorrerLista();
		System.out.println("El número que devuelve es...");
		lista3.devuelveNumero();
		
		
	}

}
